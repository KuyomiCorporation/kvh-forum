#!/usr/bin/env ruby
# frozen_string_literal: true

puts "Loading application..."
require_relative "../config/environment"

module Migrations
  class GenerateSchema
    def initialize(opts = {})
      config = YAML.load_file(File.join(__dir__, "schema.yml"))

      @table_include_list = config["tables"]["include"]
      @table_skip_list = config["tables"]["exclude"]
      @column_skip_list = config["columns"]["exclude"]
      @output_stream = StringIO.new
    end

    def self.run
      puts "Generating base migration schema for Discourse #{Discourse::VERSION::STRING}"

      self.new.run
    end

    def run
      header
      tables
      save
    end

    private

    def table_list
      @table_names ||= @table_include_list.map { |t| t["name"] }

      @table_list ||=
        ActiveRecord::Base.connection.tables.sort.select { |t| @table_names.include?(t) }
    end

    def header
      @output_stream.puts <<~HEADER
        /*
         This file is auto-generated from the current state of the Discourse core database. Instead
         of editing this file, please update the migrations `schema.yml` config and re-run the
         `generate_schema` script to update this file
        */
      HEADER
    end

    def tables
      table_list.each do |table_name|
        columns = ActiveRecord::Base.connection.columns(table_name)
        pk_name = ActiveRecord::Base.connection.primary_key(table_name)
        pk_col = columns.find { |c| c.name == pk_name }

        table_column_skip_list =
          @table_include_list.find { |t| t["name"] == table_name }.fetch("exclude_columns", [])

        column_skip_list = table_column_skip_list + @column_skip_list

        @output_stream.puts ""
        @output_stream.puts "CREATE TABLE #{table_name} ("
        @output_stream.puts " #{pk_col.name} #{pk_col.type.upcase} NOT NULL PRIMARY KEY,"

        columns.each do |column|
          next if column.name == pk_name
          next if column_skip_list.include?(column.name)

          converted_type =
            case column.type
            when :string, :inet
              "TEXT"
            else
              column.type.upcase
            end

          @output_stream.puts " #{column.name} #{converted_type},"
        end

        @output_stream.seek(@output_stream.pos - 2) # Remove last trailing comma

        @output_stream.puts ""
        @output_stream.puts ");"
      end
    end

    def save
      output_filename = File.join(__dir__, "000-base_schema.sql")
      File.open(output_filename, "w") { |f| f << @output_stream.string }
    end
  end
end

Migrations::GenerateSchema.run
